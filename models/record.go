// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Record is an object representing the database table.
type Record struct {
	ID                 int64       `boil:"Id" json:"Id" toml:"Id" yaml:"Id"`
	Identity           null.String `boil:"Identity" json:"Identity,omitempty" toml:"Identity" yaml:"Identity,omitempty"`
	Subject            null.String `boil:"Subject" json:"Subject,omitempty" toml:"Subject" yaml:"Subject,omitempty"`
	Notes              null.String `boil:"Notes" json:"Notes,omitempty" toml:"Notes" yaml:"Notes,omitempty"`
	Actions            null.String `boil:"Actions" json:"Actions,omitempty" toml:"Actions" yaml:"Actions,omitempty"`
	Tags               null.String `boil:"Tags" json:"Tags,omitempty" toml:"Tags" yaml:"Tags,omitempty"`
	SourceType         null.String `boil:"SourceType" json:"SourceType,omitempty" toml:"SourceType" yaml:"SourceType,omitempty"`
	SourceUserIdentity null.String `boil:"SourceUserIdentity" json:"SourceUserIdentity,omitempty" toml:"SourceUserIdentity" yaml:"SourceUserIdentity,omitempty"`
	SourceRecordId     string      `boil:"SourceRecordId" json:"SourceRecordId" toml:"SourceRecordId" yaml:"SourceRecordId"`
	SourceRaw          null.String `boil:"SourceRaw" json:"SourceRaw,omitempty" toml:"SourceRaw" yaml:"SourceRaw,omitempty"`
	DateAdded          null.String `boil:"DateAdded" json:"DateAdded,omitempty" toml:"DateAdded" yaml:"DateAdded,omitempty"`
	DateLastModified   null.String `boil:"DateLastModified" json:"DateLastModified,omitempty" toml:"DateLastModified" yaml:"DateLastModified,omitempty"`

	R *recordR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L recordL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RecordColumns = struct {
	ID                 string
	Identity           string
	Subject            string
	Notes              string
	Actions            string
	Tags               string
	SourceType         string
	SourceUserIdentity string
	SourceRecordId     string
	SourceRaw          string
	DateAdded          string
	DateLastModified   string
}{
	ID:                 "Id",
	Identity:           "Identity",
	Subject:            "Subject",
	Notes:              "Notes",
	Actions:            "Actions",
	Tags:               "Tags",
	SourceType:         "SourceType",
	SourceUserIdentity: "SourceUserIdentity",
	SourceRecordId:     "SourceRecordId",
	SourceRaw:          "SourceRaw",
	DateAdded:          "DateAdded",
	DateLastModified:   "DateLastModified",
}

// RecordRels is where relationship names are stored.
var RecordRels = struct {
}{}

// recordR is where relationships are stored.
type recordR struct {
}

// NewStruct creates a new relationship struct
func (*recordR) NewStruct() *recordR {
	return &recordR{}
}

// recordL is where Load methods for each relationship are stored.
type recordL struct{}

var (
	recordColumns               = []string{"Id", "Identity", "Subject", "Notes", "Actions", "Tags", "SourceType", "SourceUserIdentity", "SourceRecordId", "SourceRaw", "DateAdded", "DateLastModified"}
	recordColumnsWithoutDefault = []string{}
	recordColumnsWithDefault    = []string{"Id", "Identity", "Subject", "Notes", "Actions", "Tags", "SourceType", "SourceUserIdentity", "SourceRecordId", "SourceRaw", "DateAdded", "DateLastModified"}
	recordPrimaryKeyColumns     = []string{"Id"}
)

type (
	// RecordSlice is an alias for a slice of pointers to Record.
	// This should generally be used opposed to []Record.
	RecordSlice []*Record
	// RecordHook is the signature for custom Record hook methods
	RecordHook func(context.Context, boil.ContextExecutor, *Record) error

	recordQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	recordType                 = reflect.TypeOf(&Record{})
	recordMapping              = queries.MakeStructMapping(recordType)
	recordPrimaryKeyMapping, _ = queries.BindMapping(recordType, recordMapping, recordPrimaryKeyColumns)
	recordInsertCacheMut       sync.RWMutex
	recordInsertCache          = make(map[string]insertCache)
	recordUpdateCacheMut       sync.RWMutex
	recordUpdateCache          = make(map[string]updateCache)
	recordUpsertCacheMut       sync.RWMutex
	recordUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var recordBeforeInsertHooks []RecordHook
var recordBeforeUpdateHooks []RecordHook
var recordBeforeDeleteHooks []RecordHook
var recordBeforeUpsertHooks []RecordHook

var recordAfterInsertHooks []RecordHook
var recordAfterSelectHooks []RecordHook
var recordAfterUpdateHooks []RecordHook
var recordAfterDeleteHooks []RecordHook
var recordAfterUpsertHooks []RecordHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Record) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range recordBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Record) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range recordBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Record) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range recordBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Record) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range recordBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Record) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range recordAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Record) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range recordAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Record) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range recordAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Record) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range recordAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Record) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range recordAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRecordHook registers your hook function for all future operations.
func AddRecordHook(hookPoint boil.HookPoint, recordHook RecordHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		recordBeforeInsertHooks = append(recordBeforeInsertHooks, recordHook)
	case boil.BeforeUpdateHook:
		recordBeforeUpdateHooks = append(recordBeforeUpdateHooks, recordHook)
	case boil.BeforeDeleteHook:
		recordBeforeDeleteHooks = append(recordBeforeDeleteHooks, recordHook)
	case boil.BeforeUpsertHook:
		recordBeforeUpsertHooks = append(recordBeforeUpsertHooks, recordHook)
	case boil.AfterInsertHook:
		recordAfterInsertHooks = append(recordAfterInsertHooks, recordHook)
	case boil.AfterSelectHook:
		recordAfterSelectHooks = append(recordAfterSelectHooks, recordHook)
	case boil.AfterUpdateHook:
		recordAfterUpdateHooks = append(recordAfterUpdateHooks, recordHook)
	case boil.AfterDeleteHook:
		recordAfterDeleteHooks = append(recordAfterDeleteHooks, recordHook)
	case boil.AfterUpsertHook:
		recordAfterUpsertHooks = append(recordAfterUpsertHooks, recordHook)
	}
}

// One returns a single record record from the query.
func (q recordQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Record, error) {
	o := &Record{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for record")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Record records from the query.
func (q recordQuery) All(ctx context.Context, exec boil.ContextExecutor) (RecordSlice, error) {
	var o []*Record

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Record slice")
	}

	if len(recordAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Record records in the query.
func (q recordQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count record rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q recordQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if record exists")
	}

	return count > 0, nil
}

// Records retrieves all the records using an executor.
func Records(mods ...qm.QueryMod) recordQuery {
	mods = append(mods, qm.From("\"record\""))
	return recordQuery{NewQuery(mods...)}
}

// FindRecord retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRecord(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Record, error) {
	recordObj := &Record{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"record\" where \"Id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, recordObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from record")
	}

	return recordObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Record) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no record provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recordColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	recordInsertCacheMut.RLock()
	cache, cached := recordInsertCache[key]
	recordInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			recordColumns,
			recordColumnsWithDefault,
			recordColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(recordType, recordMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(recordType, recordMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"record\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"record\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"record\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, recordPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into record")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == recordMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for record")
	}

CacheNoHooks:
	if !cached {
		recordInsertCacheMut.Lock()
		recordInsertCache[key] = cache
		recordInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Record.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Record) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	recordUpdateCacheMut.RLock()
	cache, cached := recordUpdateCache[key]
	recordUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			recordColumns,
			recordPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update record, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"record\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, recordPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(recordType, recordMapping, append(wl, recordPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update record row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for record")
	}

	if !cached {
		recordUpdateCacheMut.Lock()
		recordUpdateCache[key] = cache
		recordUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q recordQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for record")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for record")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RecordSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"record\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, recordPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in record slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all record")
	}
	return rowsAff, nil
}

// Delete deletes a single Record record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Record) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Record provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), recordPrimaryKeyMapping)
	sql := "DELETE FROM \"record\" WHERE \"Id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from record")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for record")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q recordQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no recordQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from record")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for record")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RecordSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Record slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(recordBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"record\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, recordPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from record slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for record")
	}

	if len(recordAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Record) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRecord(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RecordSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RecordSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"record\".* FROM \"record\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, recordPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RecordSlice")
	}

	*o = slice

	return nil
}

// RecordExists checks if the Record row exists.
func RecordExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"record\" where \"Id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if record exists")
	}

	return exists, nil
}
